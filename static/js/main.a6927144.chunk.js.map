{"version":3,"sources":["components/DisplayList.jsx","components/TodoList.jsx","App.js","serviceWorker.js","index.js"],"names":["DisplayList","list","remove","useState","displayList","setDisplayList","showAll","document","getElementById","showSome","changeCheck","item","event","label","target","labels","checked","check","style","textDecoration","console","log","className","id","map","i","display","key","type","name","onClick","e","length","filter","tarea","TodoList","setList","listItem","setListItem","value","onChange","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a6927144.chunk.js","sourcesContent":["import React from 'react';\r\nimport { BsTrash } from \"react-icons/bs\";\r\nimport { useState } from 'react';\r\nimport { BsListCheck } from \"react-icons/bs\";\r\n\r\n\r\nconst DisplayList = ({list, remove}) => {\r\n    const [displayList, setDisplayList] = useState([])\r\n    const showAll = document.getElementById(\"showAll\")\r\n    const showSome = document.getElementById(\"showSome\")\r\n   \r\n    const changeCheck = (item, event) => {\r\n        let label = event.target.labels[0]\r\n       \r\n        if(event.target.checked){\r\n             item.check = true;\r\n             label.style.textDecoration = \"line-through\"\r\n         }\r\n         else {\r\n            item.check = false;\r\n            label.style.textDecoration = \"none\"\r\n         }\r\n    }\r\n    \r\n    const displayAll = () => {\r\n        showAll.style.display = \"block\";\r\n        showSome.style.display = \"none\";\r\n\r\n        setDisplayList([...list]) \r\n      \r\n        \r\n     }\r\n     const displayIncomplete = () => {\r\n        showAll.style.display = \"none\";\r\n        showSome.style.display = \"block\";\r\n        setDisplayList(list.filter(tarea => tarea.check == false)) \r\n       \r\n     }\r\n     const displayComplete = () => {\r\n        showAll.style.display = \"none\";\r\n        showSome.style.display = \"block\";\r\n         setDisplayList(list.filter(tarea => tarea.check == true)) \r\n       \r\n        \r\n     }\r\n    console.log(displayList)\r\n    \r\n   return (\r\n        <div className=\"displayList\">\r\n            <div id=\"showAll\">\r\n            \r\n                {list.map((item, i )=> {\r\n                    // console.log(item)\r\n                    return ( \r\n                        <label style={{display:\"block\"}} key={i}>\r\n                            <input type=\"checkbox\" name={i}  onClick={(e) => {changeCheck(item,e)}}/> {item.name} <BsTrash onClick={() => {remove(item)}}/>\r\n                        </label>\r\n                    )\r\n                })}\r\n            \r\n            </div>\r\n            <div id=\"showSome\">\r\n                <ul>\r\n\r\n                {displayList.map((item, i )=> {\r\n                    // console.log(item)\r\n                    return ( \r\n                        <label style={{display:\"block\"}} key={i}>\r\n                            <input type=\"checkbox\" name={i}  onClick={(e) => {changeCheck(item,e)}}/> {item.name} <BsTrash onClick={() => {remove(item)}}/>\r\n                        </label>\r\n                    )\r\n                })} \r\n                </ul>\r\n            </div>\r\n            \r\n            <div className=\"displayTags\">\r\n                <span>{list.length} <BsListCheck /></span>\r\n                <span className=\"tag tag--all\" onClick={displayAll}>Todas</span>\r\n                <span className=\"tag tag--incomplete\" onClick={displayIncomplete}>Incompletas</span>\r\n                <span className=\"tag tag--complete\" onClick={displayComplete}>Completas</span>\r\n            </div>\r\n        </div>\r\n   ) \r\n\r\n    \r\n\r\n}\r\n\r\nexport default DisplayList;","import React from 'react';\r\nimport DisplayList from \"./DisplayList\"\r\n//import DisplayTags from \"./DisplayTags\";\r\n\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport { useState } from 'react';\r\nimport { BsTrash } from \"react-icons/bs\";\r\n// import { BsListCheck } from \"react-icons/bs\";\r\n\r\n\r\n\r\n\r\n\r\nconst TodoList = () => {\r\n    const [list, setList] = useState([]) //este va a ser el array de las tareas\r\n    // const [displayList, setDisplayList] = useState([])\r\n    const [listItem, setListItem] = useState({name: \"\", check: \"\"})\r\n\r\n    let incompleteTasks = [];\r\n    let completeTasks = [];\r\n\r\n\r\n    const inputValue = (event) => {\r\n       setListItem({ name : event.target.value, check : false });\r\n    \r\n    };\r\n\r\n    const addItem = () => {\r\n        setList([...list, listItem])   \r\n        setListItem({name: \"\", check: \"\"})\r\n        \r\n    }\r\n\r\n    const removeItem = (item) => {\r\n        setList(list.filter(tarea => tarea !== item))  \r\n       \r\n    }\r\n\r\n    // const displayAll = () => {\r\n    //    setDisplayList([...list]) \r\n       \r\n    // }\r\n    // const displayIncomplete = () => {\r\n      \r\n    //    setDisplayList(list.filter(tarea => tarea.check == false)) \r\n    // }\r\n    // const displayComplete = () => {\r\n    //     setDisplayList(list.filter(tarea => tarea.check == true)) \r\n    // }\r\n   \r\n    \r\n   \r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"input\">\r\n                <input type=\"text\" value={listItem.name} onChange={inputValue} placeholder=\"Ingrese una tarea\"/> <AiOutlinePlusCircle onClick={addItem}/>\r\n            </div>\r\n            {/* <DisplayList list={list} remove={removeItem} all={displayAll} incomp={incompleteTasks} comp={completeTasks}/> */}\r\n            <DisplayList list={list} remove={removeItem}  />\r\n\r\n            {/* <div className=\"displayTags\">\r\n                <span>{list.length} <BsListCheck /></span>\r\n                <span className=\"tag tag--all\" onClick={displayAll}>Todas</span>\r\n                <span className=\"tag tag--incomplete\" onClick={displayIncomplete}>Incompletas</span>\r\n                <span className=\"tag tag--complete\" onClick={displayComplete}>Completas</span>\r\n            </div> */}\r\n        </div>\r\n    )\r\n   \r\n\r\n};\r\n\r\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>To Do</h1>\n      <TodoList />      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}